const fs = require('fs')
const write = require('write')
const path = require('path')
const chalk = require('chalk')
const defaultFilePath = '../config/version.js'
const config = require('../config')

const getVersionComputed = function (versionObj) {
  return `${versionObj.year}.${versionObj.month}.${versionObj.buildThisMonth}`
}

const getDefaultVersionObj = function () {
  let now = new Date()
  let res = {
    version: null,
    year: now.getUTCFullYear(),
    month: now.getUTCMonth() + 1, // JS Month starts at 0
    buildTotal: 0,
    buildThisYear: 0,
    buildThisMonth: 0
  }
  res.version = getVersionComputed(res)
  return res
}

const getCurrentVersionObjFromFile = function (filePath) {
  if (typeof filePath === 'undefined') {
    filePath = defaultFilePath
  }
  filePath = path.join(config.build.sourceRoot, filePath)
  let existingVersionObj = {}
  if (fs.existsSync(filePath)) {
    existingVersionObj = require(filePath)
  }
  return {
    ...getDefaultVersionObj(),
    ...existingVersionObj
  }
}

const versionObjToJsModuleString = function (versionObj) {
  // Prepare content string...
  let contentArr = []
  let versionObjKeys = Object.keys(versionObj)
  versionObjKeys.forEach((key, iKey) => {
    let apostr = `'`
    if (Number.isFinite(versionObj[key])) {
      apostr = ''
    }
    const item = `  '${key}': ${apostr}${versionObj[key]}${apostr}`
    contentArr.push(item)
  })

  // Generate result string...
  let str = '// File auto-generated by build_version.js\n'
  str += '/* eslint-disable eol-last */\n'
  str += `module.exports = {\n${contentArr.join(',\n')}\n}\n`

  return str
}

const incrementVersionObj = function (versionObj) {
  const now = new Date()
  const isSameYear = (versionObj.year === now.getUTCFullYear())
  const isSameMonth = (isSameYear && (versionObj.month === (now.getUTCMonth() + 1)))

  const newVersionObj = {
    version: null,
    year: now.getUTCFullYear(),
    month: now.getUTCMonth() + 1, // JS Month starts at 0
    buildTotal: versionObj.buildTotal + 1,
    buildThisYear: (isSameYear) ? (versionObj.buildThisYear + 1) : 0,
    buildThisMonth: (isSameMonth) ? (versionObj.buildThisMonth + 1) : 0
  }
  newVersionObj.version = getVersionComputed(newVersionObj)
  return newVersionObj
}

const saveFile = function (contentStr, filePath) {
  if (typeof filePath === 'undefined') {
    filePath = defaultFilePath
  }
  filePath = path.join(config.build.sourceRoot, filePath)
  write.sync(filePath, contentStr)
}

// Execute
const Run = class Run {
  constructor () {
    let current = getCurrentVersionObjFromFile()
    let incremented = incrementVersionObj(current)
    saveFile(versionObjToJsModuleString(incremented))
    console.log(chalk.cyan('  Build (version) complete.\n'))
  }
}

new Run()
