const fs = require('fs')
const write = require('write')
const path = require('path')
const chalk = require('chalk')
const config = require('../config')
let tool = require('../src/modules/Utils/tool')

const saveFile = function (contentStr, filePath) {
  filePath = path.join(config.build.hashesRoot, filePath)
  write.sync(filePath, contentStr)
  return filePath
}


const toString = function (arrayOfPlainValues) {
  // Prepare content string...
  let contentArr = []
  let iLenCount = 0
  let lenCount = arrayOfPlainValues.length
  arrayOfPlainValues.forEach((v, i) => {
    iLenCount++
    let comma = ' '
    if (lenCount !== iLenCount) {
      comma = ','
    }
    const item = `  '${tool.hash256(v)}'${comma} // ${i}: ${v}`
    contentArr.push(item)
  })
  // Generate result string...
  let str = '// File auto-generated by build_hashes.js\n'
  // str += '/* eslint-disable eol-last */\n'
  str += `module.exports = [\n${contentArr.join('\n')}\n]\n`

  return str
}

const createHashes = function (sourceFile) {
  let createdFiles = []
  let plainSourceFilePath = path.join(config.build.hashesRoot, sourceFile)
  let plainValues = []
  if (fs.existsSync(plainSourceFilePath)) {
    plainValues = require(plainSourceFilePath)
  }

  let listOfDestFile = Object.keys(plainValues)
  listOfDestFile.forEach((hashesFileName, i) => {
    let str = toString(plainValues[hashesFileName])
    let createdFilePath = saveFile(str, './' + hashesFileName + '.js')
    createdFiles.push(createdFilePath)
  })
  return createdFiles
}


// Execute
const Run = class Run {
  constructor () {
    let results = [
      ...createHashes('./_hashes.plain.js')
    ]
    console.log(chalk.cyan('  Build (hashes) complete.\n'))
    results.forEach((v, i) => {
      console.log('    ' + chalk.green(v))
    })
  }
}

new Run()
